const express = require("express");
const checkAuth = require("./../middleware/checkAuth.js");
const {
  addDailyEntry,
  editDailyEntry,
  getEntries,
  clearEntries,
  deleteEntry
} = require("./../controllers/entry.js");

const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     Entry:
 *       type: object
 *       properties:
 *         value:
 *           oneOf:
 *             - type: boolean
 *             - type: string
 *             - type: number
 *           description: The value of the quantity of the task done in a day
 *           example: true
 *         isBreakDay:
 *           type: boolean
 *           description: This checks whether the current date is a break day or not
 *           example: true
 *         comment:
 *           type: string
 *           description: Comment on the entry made in the current day
 *           example: Today was hectic
 *         date:
 *           type: string
 *           description: Date the entry was made for
 *           example: 2024-07-22T23:00:00.000+00:00
 *     Type:
 *       type: object
 *       properties:
 *         type:
 *           type: string
 *           description: The type of the entry
 *           example: boolean
 *     OtherEntryDetails:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: ID of the entry
 *           example: 456tyu8909890123ee4
 *         taskId:
 *           type: string
 *           description: ID of the task the entry is related to
 *           example: 456tyu8909890123ee4
 *         createdAt:
 *           type: string
 *           description: Date the entry was made
 *           example: 2024-07-22T23:00:00.000+00:00
 *         updatedAt:
 *           type: string
 *           description: Date the entry was last updated
 *           example: 2024-07-22T23:00:00.000+00:00
 *         expiresAt:
 *           type: string
 *           description: Date the entry will be automatically removed from the database
 *           example: 2024-07-22T23:00:00.000+00:00
 *     SavedTask:
 *       type: object
 *       properties:
 *          _id:
 *            type: string
 *            description: Auto generated database ID
 *            example: 678ui9209876yji712
 *          title:
 *            type: string
 *            description: Title of the task
 *            example: Sweep room
 *          type:
 *            type: string
 *            description: Type of task
 *            enum: ["number", "boolean", "time", "minutes"]
 *            example: boolean
 *          unit:
 *            type: string
 *            description: Unit of the measurement
 *            example: none
 *          userId:
 *            type: string
 *            description: ID of the user
 *            example: 2345ty678990i
 *          breakDays:
 *            type: array
 *            items:
 *              type: string
 *              description: Days of the week
 *              enum: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
 *              example: Sunday
 *          startingDate:
 *            type: string
 *            description: Starting date of the task in ISOString format
 *            example: 2024-07-06T15:49:05.191+00:00
 *          endingDate:
 *            type: string
 *            description: Ending date of the task in ISOString format
 *            example: 2024-07-06T15:49:05.191+00:00
 *          idealValue:
 *            oneOf:
 *              - type: number
 *              - type: boolean
 *              - type: string
 *            description: The ideal value of the Task to be carried out each day
 *            example: true
 *          description:
 *            type: string
 *            description: The description of the task to be measured.
 *            example: Tracks if I swept my room or not for each day
 *          dateOfLastTaskEntry:
 *            type: string
 *            nullable: true
 *            description: The date of the last daily entry in this case of null type
 *            example: 2024-07-06T15:49:05.191+00:00
 *          createdAt:
 *            type: string
 *            description: Date the task was created in ISOString format. It is auto generated by the database
 *            example: 2024-07-20T12:15:10.155+00:00
 *          expiresAt:
 *            type: string
 *            description: Date the task will be automatically removed from the database. It is auto generated by the database
 *            example: 2024-07-20T12:15:10.155+00:00
 *          updatedAt:
 *            type: string
 *            description: Date the task was created in ISOString format. It is auto generated by the database
 *            example: 2024-07-20T12:15:10.155+00:00
 *          maxTime:
 *            type: string
 *            nullable: true
 *            description: The max time that is permitted in task type. This property is only applicable to task type of "time"
 *            example: null
 *
 */

/**
 * @swagger
 * /api/v1/task/{taskId}/daily-entry:
 *   post:
 *     summary: Endpoint for adding daily entries
 *     description: Endpoint for adding daily entries
 *     parameters:
 *       - in: path
 *         name: taskId
 *         required: true
 *         description: ID of task related to the entry
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             allOf:
 *               - $ref: '#/components/schemas/Entry'
 *               - $ref: '#/components/schemas/Type'
 *     responses:
 *       200:
 *         description: Entry added successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 entry:
 *                   allOf:
 *                     - $ref: '#/components/schemas/Entry'
 *                     - $ref: '#/components/schemas/OtherEntryDetails'
 *                 task:
 *                   $ref: '#/components/schemas/SavedTask'
 *       400:
 *           description: Fill all fields || The task type do not match the type sent.
 *       404:
 *         description: Task do not exists.
 *       401:
 *         description: User is not authorized to add entries to this task.
 *       500:
 *         description: The [boolean | number | time | minutes] entry date (****-**-**) is [earlier | later] than the task starting date. || [BooleanEntry | NumberEntry | MinutesEntry | TimeEntry] validation failed- date- No two entries can have the same taskId and date.
 */

router.post("/task/:taskId/daily-entry", checkAuth, addDailyEntry);

/**
 * @swagger
 * /api/v1/task/{taskId}/daily-entry/{entryId}:
 *   patch:
 *     summary: Endpoint for editing entries
 *     description: Endpoint for editing entries
 *     parameters:
 *       - in: path
 *         name: taskId
 *         required: true
 *         description: ID of task related to the entry to be edited
 *         schema:
 *           type: string
 *       - in: path
 *         name: entryId
 *         required: true
 *         description: ID of the entry to be edited
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             allOf:
 *               - $ref: '#/components/schemas/Entry'
 *               - $ref: '#/components/schemas/Type'
 *     responses:
 *       200:
 *         description: Entry successfully edited
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 entry:
 *                   allOf:
 *                     - $ref: '#/components/schemas/Entry'
 *                     - $ref: '#/components/schemas/OtherEntryDetails'
 *                   not:
 *                     required: ["type"]
 *       404:
 *         description: Task do not exists. || Entry does not exists.
 *       400:
 *         description: taskId missing || Fill all fields || Date cannot be changed once set.
 *       401:
 *         description: User is not authorized to add entries in this task.
 *       409:
 *         description: The task type do not match the type sent.
 *
 */
router.patch("/task/:taskId/daily-entry/:entryId", checkAuth, editDailyEntry);

/**
 * @swagger
 * /api/v1/task/{taskId}/daily-entry/{entryId}:
 *   delete:
 *     summary: Endpoint for deleting an entry
 *     description: Only the last entry of a task can be deleted. Entries at the middle or beginning cannot be deleted.
 *     parameters:
 *       - in: path
 *         name: taskId
 *         required: true
 *         description: ID of task related to the entry to be edited
 *         schema:
 *           type: string
 *       - in: path
 *         name: entryId
 *         required: true
 *         description: ID of the entry to be edited
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Entry successfully deleted
 *       400:
 *         description: taskId or entryId missing. || entry to be deleted not found || You can only start deleting entries from the last entry. || entry to be deleted does not belong to the task which taskId was specified.
 *       404:
 *         description: Task does not exist. || entry to be deleted not found
 *       401:
 *         description: User is not authorized to delete entries in this task.
 */

router.delete("/task/:taskId/daily-entry/:entryId", checkAuth, deleteEntry);

/**
 * @swagger
 * /api/v1/task/{taskId}/daily-entries?page=1:
 *   get:
 *     summary: Endpoint for getting all entries of a task
 *     description: Endpoint for getting all entries of a task
 *     parameters:
 *       - in: path
 *         required: true
 *         name: taskId
 *         description: ID of the task that the entries are to be retrieved
 *         schema:
 *           type: string
 *       - in: query
 *         name: page
 *         description: the number that determines which list of entries should be fetched from the total number of entries
 *         schema:
 *           type: integer
 *     responses:
 *       200:
 *         description: Entries retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 entries:
 *                   type: array
 *                   items:
 *                     allOf:
 *                       - $ref: '#/components/schemas/Entry'
 *                       - $ref: '#/components/schemas/OtherEntryDetails'
 *                 totalItems:
 *                   type: number
 *                   description: Total number of entries
 *                   example: 30
 *       404:
 *         description: Task not found."
 *       401:
 *         description: User is not authorized to get entries in this task.
 *       400:
 *         description: taskId not provided
 *
 *
 */

router.get("/task/:taskId/daily-entries", checkAuth, getEntries);

/**
 * @swagger
 * /api/v1/task/{taskId}/daily-entries:
 *   delete:
 *     summary: Endpoint for deleting all entries of a task
 *     description: Endpoint for deleting all entries of a task
 *     parameters:
 *       - in: path
 *         required: true
 *         name: taskId
 *         description: ID of task in which its entries are to be deleted
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Entries cleared successfully
 *       404:
 *         description: Task does not exist.
 *       401:
 *         description: User is not authorized to add entries in this task.
 */

router.delete("/task/:taskId/daily-entries", checkAuth, clearEntries);

module.exports = router;
